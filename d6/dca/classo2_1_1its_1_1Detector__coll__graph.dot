digraph "o2::its::Detector"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{o2::its::Detector\n||+ Detector()\l+ Detector()\l+ ~Detector()\l+ InitializeO2Detector()\l+ ProcessHits()\l+ Register()\l+ getHits()\l+ Reset()\l+ ConstructGeometry()\l+ createServiceBarrel()\l+ defineLayer()\l+ defineLayerTurbo()\l+ getLayerParameters()\l+ addHit()\l+ defineWrapperVolume()\l+ addAlignableVolumes()\l+ addAlignableVolumesLayer()\l+ addAlignableVolumesStave()\l+ addAlignableVolumesHalfStave()\l+ addAlignableVolumesModule()\l+ addAlignableVolumesChip()\l+ chipVolUID()\l+ EndOfEvent()\l+ FinishPrimary()\l+ finishRun()\l+ BeginPrimary()\l+ PostTrack()\l+ PreTrack()\l+ Print()\l+ Read()\l+ getNumberOfLayers()\l+ setStaveModelIB()\l+ setStaveModelOB()\l+ getStaveModelIB()\l+ getStaveModelOB()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{o2::base::DetImpl\<\l Detector \>\n||+ getHitBranchNames()\l+ updateHitTrackIndices()\l+ attachHits()\l+ mergeAndAdjustHits()\l+ mergeHitEntries()\l+ fillHitBranch()\l+ CloneModule()\l+ freeHitBuffers()\l+ setHits()\l+ createHitBuffers()\l+ initializeLate()\l+ BeginEvent()\l+ ~DetImpl()\l# ClassDefOverride()\l}",height=0.2,width=0.4,color="black",URL="$de/dc8/classo2_1_1base_1_1DetImpl.html"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{o2::base::Detector\n||+ Detector()\l+ Detector()\l+ ~Detector()\l+ Material()\l+ Mixture()\l+ Medium()\l+ SpecialCuts()\l+ SpecialCut()\l+ SpecialProcesses()\l+ SpecialProcess()\l+ Matrix()\l+ SetSpecialPhysicsCuts()\l+ addAlignableVolumes()\l+ defineWrapperVolume()\l+ setNumberOfWrapperVolumes()\l+ defineLayer()\l+ defineLayerTurbo()\l+ getMaterialID()\l+ getMediumID()\l+ getMediumIDMappingAsVector()\l+ addNameTo()\l+ getHitBranchNames()\l+ updateHitTrackIndices()\l+ attachHits()\l+ fillHitBranch()\l+ mergeHitEntries()\l+ InitializeO2Detector()\l+ Initialize()\l+ initializeLate()\l+ registerSensitiveVolumeAnd\lGetVolID()\l+ registerSensitiveVolumeAnd\lGetVolID()\l+ GetCollection()\l+ setDensityFactor()\l+ getDensityFactor()\l+ initFieldTrackingParams()\l# Detector()\l# operator=()\l}",height=0.2,width=0.4,color="black",URL="$d2/d00/classo2_1_1base_1_1Detector.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{FairDetector\n||}",height=0.2,width=0.4,color="black",URL="$d6/d0c/classFairDetector.html"];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #NHITBUFFERS" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{static constexpr int\n||}",height=0.2,width=0.4,color="grey75"];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #mShmBusy" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{bool *\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #mCurrentBuffer\n#mInitialized" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{int\n||}",height=0.2,width=0.4,color="grey75"];
  Node8 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #mCachedPtr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{vector\< void * \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node9 -> Node2 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Detector \>" ,fontname="Helvetica"];
  Node9 [label="{o2::base::DetImpl\<\l Det \>\n||+ getHitBranchNames()\l+ updateHitTrackIndices()\l+ attachHits()\l+ mergeAndAdjustHits()\l+ mergeHitEntries()\l+ fillHitBranch()\l+ CloneModule()\l+ freeHitBuffers()\l+ setHits()\l+ createHitBuffers()\l+ initializeLate()\l+ BeginEvent()\l+ ~DetImpl()\l# ClassDefOverride()\l}",height=0.2,width=0.4,color="black",URL="$de/dc8/classo2_1_1base_1_1DetImpl.html"];
  Node3 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #NHITBUFFERS" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #mShmBusy" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #mCurrentBuffer\n#mInitialized" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #mCachedPtr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mLayerName" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{TString\n||}",height=0.2,width=0.4,color="grey75"];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +sNumberLayers\n+sNumberInnerLayers\n#mLayerID\n+sNumberOfWrapperVolumes" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{Int_t\n||}",height=0.2,width=0.4,color="grey75"];
  Node12 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +mGeometryTGeo" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{o2::its::GeometryTGeo\n||+ GeometryTGeo()\l+ ~GeometryTGeo()\l+ GeometryTGeo()\l+ operator=()\l+ fillMatrixCache()\l+ fillTrackingFramesCache()\l+ Build()\l+ getNumberOfChipRowsPerModule()\l+ getNumberOfChipColsPerModule()\l+ getNumberOfChipsPerModule()\l+ getNumberOfChipsPerHalfStave()\l+ getNumberOfChipsPerStave()\l+ getNumberOfChipsPerLayer()\l+ getNumberOfModules()\l+ getNumberOfHalfStaves()\l+ getNumberOfStaves()\l+ getNumberOfLayers()\l+ getChipIndex()\l+ getChipIndex()\l+ getChipIndex()\l+ getChipIndex()\l+ getChipId()\l+ getLayer()\l+ getStave()\l+ getHalfStave()\l+ getModule()\l+ getChipIdInLayer()\l+ getChipIdInStave()\l+ getChipIdInHalfStave()\l+ getChipIdInModule()\l+ getLastChipIndex()\l+ getFirstChipIndex()\l+ getSymbolicName()\l+ getSymbolicName()\l+ getMatrix()\l+ getMatrix()\l+ getOriginalMatrix()\l+ getOriginalMatrix()\l+ getMatrixT2L()\l+ getMatrixSensor()\l+ getMatrixSensor()\l+ getMatrixT2GRot()\l+ isTrackingFrameCached()\l+ getSensorXAlphaRefPlane()\l+ getSensorRefX()\l+ getSensorRefAlpha()\l+ localToGlobal()\l+ localToGlobal()\l+ globalToLocal()\l+ globalToLocal()\l+ localToGlobalVector()\l+ globalToLocalVector()\l+ Print()\l+ Instance()\l+ adopt()\l+ getITSVolPattern()\l+ getITSLayerPattern()\l+ getITSWrapVolPattern()\l+ getITSStavePattern()\l+ getITSHalfStavePattern()\l+ getITSModulePattern()\l+ getITSChipPattern()\l+ getITSSensorPattern()\l+ setITSVolPattern()\l+ setITSLayerPattern()\l+ setITSWrapVolPattern()\l+ setITSStavePattern()\l+ setITSHalfStavePattern()\l+ setITSModulePattern()\l+ setITSChipPattern()\l+ setITSSensorPattern()\l+ composeSymNameITS()\l+ composeSymNameLayer()\l+ composeSymNameStave()\l+ composeSymNameHalfStave()\l+ composeSymNameModule()\l+ composeSymNameChip()\l# extractMatrixSensor()\l# createT2LMatrix()\l# extractSensorXAlpha()\l# getLayer()\l# extractNumberOfChipsPerModule()\l# extractNumberOfStaves()\l# extractNumberOfHalfStaves()\l# extractNumberOfModules()\l# extractLayerChipType()\l# extractNumberOfLayers()\l# extractVolumeCopy()\l# getPNEntry()\l}",height=0.2,width=0.4,color="black",URL="$dc/d86/classo2_1_1its_1_1GeometryTGeo.html"];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{o2::itsmft::GeometryTGeo\n||+ GeometryTGeo()\l+ GeometryTGeo()\l+ operator=()\l+ GeometryTGeo()\l+ ~GeometryTGeo()\l+ getNumberOfChips()\l+ Build()\l# ClassDefOverride()\l}",height=0.2,width=0.4,color="black",URL="$d9/d02/classo2_1_1itsmft_1_1GeometryTGeo.html"];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{o2::detectors::DetMatrix\lCache\n||+ DetMatrixCache()\l+ DetMatrixCache()\l+ ~DetMatrixCache()\l+ DetMatrixCache()\l+ operator=()\l+ getDetID()\l+ getName()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ getMatrixT2L()\l+ getMatrixT2G()\l+ getMatrixL2G()\l+ getMatrixT2GRot()\l+ isBuilt()\l+ getSize()\l+ fillMatrixCache()\l+ setSize()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ ClassDef()\l}",height=0.2,width=0.4,color="black",URL="$df/d06/classo2_1_1detectors_1_1DetMatrixCache.html"];
  Node15 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mDetID" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{o2::detectors::DetID\n|+ ITS\l+ TOF\l+ PHS\l+ CPV\l+ EMC\l+ HMP\l+ MFT\l+ Last\l|+ DetID()\l+ DetID()\l+ DetID()\l+ operator=()\l+ getID()\l+ getMask()\l+ getName()\l+ operator int()\l+ DetID()\l+ getNDetectors()\l+ getName()\l+ getMask()\l}",height=0.2,width=0.4,color="black",URL="$d6/dd5/classo2_1_1detectors_1_1DetID.html",tooltip="Static class with identifiers, bitmasks and names for ALICE detectors. "];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" +ACO\n+First\n+MCH\n+FV0\n+FT0\n+FDD\n+TRD\n+TPC\n+ZDC\n+MID\n..." ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{static constexpr ID\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node15 [color="grey25",fontsize="10",style="solid",label=" +nDetectors" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mT2G\n+mT2L\n+mL2G" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{o2::detectors::MatrixCache\l\< o2::Transform3D \>\n||+ MatrixCache()\l+ MatrixCache()\l+ ~MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html"];
  Node18 -> Node17 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::Transform3D \>" ,fontname="Helvetica"];
  Node18 [label="{o2::detectors::MatrixCache\< T \>\n||+ MatrixCache()\l+ ~MatrixCache()\l+ MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html",tooltip="MatrixCache is a vector of cached transform matrices (per sensor) for specific Transformation type..."];
  Node7 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mSize" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mT2GRot" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{o2::detectors::MatrixCache\l\< o2::Rotation2D \>\n||+ MatrixCache()\l+ MatrixCache()\l+ ~MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html"];
  Node18 -> Node19 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::Rotation2D \>" ,fontname="Helvetica"];
  Node20 -> Node12 [color="grey25",fontsize="10",style="solid",label=" #sHalfStaveName\n#sVolumeName\n#sLayerName\n#sChipName\n#sModuleName\n#sWrapperVolumeName\n#sSensorName\n#sStaveName" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{string\n||}",height=0.2,width=0.4,color="grey75"];
  Node21 -> Node12 [color="grey25",fontsize="10",style="solid",label=" #mNumberOfChipsPerStave\n#mNumberOfStaves\n#mNumberOfHalfStaves\n#mNumberOfChipsPerLayer\n#mNumberOfChipRowsPerModule\n#mNumberOfModules\n#mNumberOfChipsPerHalfStave\n#mLastChipIndex\n#mNumberOfChipsPerModule" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{vector\< int \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node22 -> Node12 [color="grey25",fontsize="10",style="solid",label=" #mLayerToWrapper" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{array\< char, MAXLAYERS \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node12 [color="grey25",fontsize="10",style="solid",label=" #MAXLAYERS" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 -> Node12 [color="grey25",fontsize="10",style="solid",label=" #mCacheRefX\n#mCacheRefAlpha" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{vector\< float \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node11 -> Node12 [color="grey25",fontsize="10",style="solid",label=" #mNumberOfLayers" ,arrowhead="odiamond",fontname="Helvetica"];
}
